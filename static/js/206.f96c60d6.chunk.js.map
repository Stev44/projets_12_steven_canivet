{"version":3,"file":"static/js/206.f96c60d6.chunk.js","mappings":"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","sources":["containers/Projects/projects.jsx"],"sourcesContent":["import './projects.scss'\r\nimport { projects } from '../../utils/content'\r\nimport { useSelector } from 'react-redux'\r\nimport { sectionLang } from '../../utils/data'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAngleRight, faAngleLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Projects = () => {\r\n  const navRef = useRef(null)\r\n  const lang = useSelector((state) => state.switchLang.lang)\r\n  const [isModalOpened, setIsModalOpened] = useState(false)\r\n  const [currentIndex, setCurrentIndex] = useState(0)\r\n  const [images, setImages] = useState([]) // État pour les images\r\n  const [touchStart, setTouchStart] = useState(0) // Pour stocker la position de départ du swipe\r\n  const [touchEnd, setTouchEnd] = useState(0)\r\n\r\n  const handlePreview = (imgArray, index) => {\r\n    setImages(imgArray) // Définit le tableau d'images à afficher\r\n    setCurrentIndex(index) // Définit l'index courant pour le slider\r\n    setIsModalOpened(true) // Ouvre la modal\r\n  }\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (navRef.current && !navRef.current.contains(event.target)) {\r\n      setIsModalOpened(false)\r\n      setCurrentIndex(0) // Reset l'index à 0 quand la modal se ferme\r\n      setImages([]) // Réinitialise le tableau d'images\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isModalOpened) {\r\n      document.addEventListener('mousedown', handleClickOutside)\r\n    }\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [isModalOpened])\r\n\r\n  const prevSlide = () => {\r\n    setCurrentIndex((prevIndex) =>\r\n      prevIndex === 0 ? images.length - 1 : prevIndex - 1\r\n    )\r\n  }\r\n\r\n  const nextSlide = () => {\r\n    setCurrentIndex((prevIndex) =>\r\n      prevIndex === images.length - 1 ? 0 : prevIndex + 1\r\n    )\r\n  }\r\n\r\n  const handleTouchStart = (e) => {\r\n    setTouchStart(e.targetTouches[0].clientX)\r\n  }\r\n\r\n  const handleTouchMove = (e) => {\r\n    setTouchEnd(e.targetTouches[0].clientX)\r\n  }\r\n\r\n  const handleTouchEnd = () => {\r\n    if (touchStart - touchEnd > 50) {\r\n      // Swipe vers la gauche -> Next slide\r\n      nextSlide()\r\n    }\r\n\r\n    if (touchStart - touchEnd < -50) {\r\n      // Swipe vers la droite -> Previous slide\r\n      prevSlide()\r\n    }\r\n  }\r\n\r\n  const handleRadioChange = (index) => {\r\n    setCurrentIndex(index)\r\n  }\r\n\r\n  return (\r\n    <section className=\"projects padding\" id=\"projects\">\r\n      <div className=\"projects_wrapper margin\">\r\n        <h2 className=\"underline\">\r\n          {!lang ? sectionLang.projectsFr : sectionLang.projectsEn}\r\n        </h2>\r\n        <div className=\"wrapper\">\r\n          {projects.map((item, index) => (\r\n            <div className=\"map\" key={index}>\r\n              <div className=\"card\">\r\n                <div className=\"card_img\">\r\n                  <div className=\"img\">\r\n                    <img src={item.img} alt={item.title} loading=\"lazy\" />\r\n                    <span className=\"img_title\">{item.title}</span>\r\n                  </div>\r\n                  <div className=\"container\">\r\n                    <div className=\"card_img_technologies\">\r\n                      {item.technologies.map((TechIcon, idx) => (\r\n                        <TechIcon key={idx} className=\"icon\" />\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"card_img_description\">\r\n                      <p>{!lang ? item.descriptionFr : item.descriptionEn}</p>\r\n                    </div>\r\n                    <div className=\"card_img_button\">\r\n                      {item.code && (\r\n                        <button>\r\n                          <p>\r\n                            <a\r\n                              href={item.code}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {!lang ? item.codeTextFr : item.codeTextEn}\r\n                            </a>\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                      {item.site && (\r\n                        <button>\r\n                          <p>\r\n                            <a\r\n                              href={item.site}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {!lang ? item.siteTextFr : item.siteTextEn}\r\n                            </a>\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                      {item.images && (\r\n                        <button onClick={() => handlePreview(item.images, 0)}>\r\n                          <p className=\"preview\">\r\n                            {!lang ? item.previewFr : item.previewEn}\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {isModalOpened && (\r\n        <div className=\"modal\">\r\n          <div\r\n            className=\"modal_preview\"\r\n            ref={navRef}\r\n            onTouchStart={handleTouchStart}\r\n            onTouchMove={handleTouchMove}\r\n            onTouchEnd={handleTouchEnd}\r\n          >\r\n            <div className=\"modal_preview_container\">\r\n              {images.length !== 1 && (\r\n                <button\r\n                  className=\"modal_preview_container_button left\"\r\n                  onClick={prevSlide}\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={faAngleLeft}\r\n                    className=\"modal_preview_container_button_icon\"\r\n                  />\r\n                </button>\r\n              )}\r\n\r\n              <img\r\n                src={images[currentIndex]}\r\n                alt={`Slide ${currentIndex + 1}`}\r\n                className=\"modal_preview_container_image\"\r\n                loading=\"lazy\"\r\n              />\r\n              {images.length !== 1 && (\r\n                <button\r\n                  className=\"modal_preview_container_button right\"\r\n                  onClick={nextSlide}\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={faAngleRight}\r\n                    className=\"modal_preview_container_button_icon\"\r\n                  />\r\n                </button>\r\n              )}\r\n            </div>\r\n            {images.length !== 1 && (\r\n              <div className=\"radio_buttons\">\r\n                {images.map((_, index) => (\r\n                  <label key={index}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"slide\"\r\n                      value={index}\r\n                      checked={currentIndex === index}\r\n                      onChange={() => handleRadioChange(index)}\r\n                    />\r\n                  </label>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Projects\r\n"],"names":["Projects","navRef","useRef","lang","useSelector","state","switchLang","isModalOpened","setIsModalOpened","useState","currentIndex","setCurrentIndex","images","setImages","touchStart","setTouchStart","touchEnd","setTouchEnd","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","prevSlide","prevIndex","length","nextSlide","_jsxs","className","id","children","_jsx","sectionLang","projectsEn","projectsFr","projects","map","item","index","src","img","alt","title","loading","technologies","TechIcon","idx","descriptionEn","descriptionFr","code","href","rel","codeTextEn","codeTextFr","site","siteTextEn","siteTextFr","onClick","handlePreview","imgArray","previewEn","previewFr","ref","onTouchStart","e","targetTouches","clientX","onTouchMove","onTouchEnd","handleTouchEnd","FontAwesomeIcon","icon","faAngleLeft","faAngleRight","_","type","name","value","checked","onChange","handleRadioChange"],"sourceRoot":""}