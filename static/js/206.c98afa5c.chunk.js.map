{"version":3,"file":"static/js/206.c98afa5c.chunk.js","mappings":"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","sources":["containers/Projects/projects.jsx"],"sourcesContent":["import './projects.scss'\r\nimport { projects } from '../../utils/content'\r\nimport { useSelector } from 'react-redux'\r\nimport { sectionLang } from '../../utils/data'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faAngleRight,\r\n  faAngleLeft,\r\n  faXmark,\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Projects = () => {\r\n  const navRef = useRef(null)\r\n  const lang = useSelector((state) => state.switchLang.lang)\r\n  const [isModalOpened, setIsModalOpened] = useState(false)\r\n  const [currentIndex, setCurrentIndex] = useState(0)\r\n  const [images, setImages] = useState([])\r\n  const [touchStart, setTouchStart] = useState(0)\r\n  const [touchEnd, setTouchEnd] = useState(0)\r\n  const [enterAnimation, setEnterAnimation] = useState('')\r\n  const [exitAnimation, setExitAnimation] = useState('')\r\n\r\n  const handlePreview = (imgArray, index) => {\r\n    setImages(imgArray)\r\n    setCurrentIndex(index)\r\n    setIsModalOpened(true)\r\n  }\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (navRef.current && !navRef.current.contains(event.target)) {\r\n      setIsModalOpened(false)\r\n      setCurrentIndex(0)\r\n      setImages([])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isModalOpened) {\r\n      document.addEventListener('mousedown', handleClickOutside)\r\n      document.body.style.overflow = 'hidden' // Désactive le défilement\r\n    } else {\r\n      document.body.style.overflow = 'unset' // Réactive le défilement\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n      document.body.style.overflow = 'unset'\r\n    }\r\n  }, [isModalOpened])\r\n\r\n  const prevSlide = () => {\r\n    setExitAnimation('slide-out-right')\r\n    setTimeout(() => {\r\n      setCurrentIndex((prevIndex) =>\r\n        prevIndex === 0 ? images.length - 1 : prevIndex - 1\r\n      )\r\n      setExitAnimation('')\r\n      setEnterAnimation('slide-in-left')\r\n    }, 100)\r\n    setEnterAnimation('')\r\n  }\r\n\r\n  const nextSlide = () => {\r\n    setExitAnimation('slide-out-left')\r\n    setTimeout(() => {\r\n      setCurrentIndex((prevIndex) =>\r\n        prevIndex === images.length - 1 ? 0 : prevIndex + 1\r\n      )\r\n      setExitAnimation('')\r\n      setEnterAnimation('slide-in-right')\r\n    }, 100)\r\n    setEnterAnimation('')\r\n  }\r\n\r\n  const handleTouchStart = (e) => {\r\n    setTouchStart(e.targetTouches[0].clientX)\r\n  }\r\n\r\n  const handleTouchMove = (e) => {\r\n    setTouchEnd(e.targetTouches[0].clientX)\r\n  }\r\n\r\n  const handleTouchEnd = () => {\r\n    if (touchStart - touchEnd > 50) {\r\n      nextSlide()\r\n    }\r\n\r\n    if (touchStart - touchEnd < -50) {\r\n      prevSlide()\r\n    }\r\n  }\r\n\r\n  const handleRadioChange = (index) => {\r\n    setCurrentIndex(index)\r\n  }\r\n\r\n  return (\r\n    <section className=\"projects padding\" id=\"projects\">\r\n      <div className=\"projects_wrapper margin\">\r\n        <h2 className=\"underline\">\r\n          {!lang ? sectionLang.projectsFr : sectionLang.projectsEn}\r\n        </h2>\r\n        <div className=\"wrapper\">\r\n          {projects.map((item, index) => (\r\n            <div className=\"map\" key={index}>\r\n              <div className=\"card\">\r\n                <div className=\"card_img\">\r\n                  <div className=\"img\">\r\n                    <img src={item.img} alt={item.altSection} loading=\"lazy\" />\r\n                    <span className=\"img_title\">{item.title}</span>\r\n                  </div>\r\n                  <div className=\"container\">\r\n                    <div className=\"card_img_technologies\">\r\n                      {item.technologies.map((TechIcon, idx) => (\r\n                        <TechIcon key={idx} className=\"icon\" />\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"card_img_description\">\r\n                      <p>{!lang ? item.descriptionFr : item.descriptionEn}</p>\r\n                    </div>\r\n                    <div className=\"card_img_button\">\r\n                      {item.code && (\r\n                        <button>\r\n                          <p>\r\n                            <a\r\n                              href={item.code}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {!lang ? item.codeTextFr : item.codeTextEn}\r\n                            </a>\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                      {item.site && (\r\n                        <button>\r\n                          <p>\r\n                            <a\r\n                              href={item.site}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {!lang ? item.siteTextFr : item.siteTextEn}\r\n                            </a>\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                      {item.images && (\r\n                        <button onClick={() => handlePreview(item.images, 0)}>\r\n                          <p className=\"preview\">\r\n                            {!lang ? item.previewFr : item.previewEn}\r\n                          </p>\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {isModalOpened && (\r\n        <div className=\"modal\">\r\n          <div\r\n            className=\"modal_preview\"\r\n            ref={navRef}\r\n            onTouchStart={handleTouchStart}\r\n            onTouchMove={handleTouchMove}\r\n            onTouchEnd={handleTouchEnd}\r\n          >\r\n            <div className=\"modal_preview_container\">\r\n              {images.length !== 1 && (\r\n                <button\r\n                  className=\"modal_preview_container_button left\"\r\n                  onClick={prevSlide}\r\n                >\r\n                  <span className=\"sr-only\">Prev Button</span>\r\n                  <FontAwesomeIcon\r\n                    icon={faAngleLeft}\r\n                    className=\"modal_preview_container_button_icon\"\r\n                  />\r\n                </button>\r\n              )}\r\n\r\n              <img\r\n                src={images[currentIndex]}\r\n                alt={`Slide ${currentIndex + 1}`}\r\n                className={`modal_preview_container_image ${enterAnimation} ${exitAnimation}`}\r\n                loading=\"lazy\"\r\n              />\r\n              {images.length !== 1 && (\r\n                <button\r\n                  className=\"modal_preview_container_button right\"\r\n                  onClick={nextSlide}\r\n                >\r\n                  <span className=\"sr-only\">Next Button</span>\r\n                  <FontAwesomeIcon\r\n                    icon={faAngleRight}\r\n                    className=\"modal_preview_container_button_icon\"\r\n                  />\r\n                </button>\r\n              )}\r\n              <FontAwesomeIcon\r\n                icon={faXmark}\r\n                className=\"modal_preview_container_close\"\r\n                onClick={() => setIsModalOpened(false)}\r\n              />\r\n            </div>\r\n            {images.length !== 1 && (\r\n              <div className=\"radio_buttons\">\r\n                {images.map((_, index) => (\r\n                  <label\r\n                    key={index}\r\n                    className={currentIndex === index ? 'active' : ''}\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"slide\"\r\n                      value={index}\r\n                      checked={currentIndex === index}\r\n                      onChange={() => handleRadioChange(index)}\r\n                    />\r\n                    <span className=\"sr-only\">Image {index + 1}</span>\r\n                  </label>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Projects\r\n"],"names":["Projects","navRef","useRef","lang","useSelector","state","switchLang","isModalOpened","setIsModalOpened","useState","currentIndex","setCurrentIndex","images","setImages","touchStart","setTouchStart","touchEnd","setTouchEnd","enterAnimation","setEnterAnimation","exitAnimation","setExitAnimation","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","body","style","overflow","removeEventListener","prevSlide","setTimeout","prevIndex","length","nextSlide","_jsxs","className","id","children","_jsx","sectionLang","projectsEn","projectsFr","projects","map","item","index","src","img","alt","altSection","loading","title","technologies","TechIcon","idx","descriptionEn","descriptionFr","code","href","rel","codeTextEn","codeTextFr","site","siteTextEn","siteTextFr","onClick","handlePreview","imgArray","previewEn","previewFr","ref","onTouchStart","e","targetTouches","clientX","onTouchMove","onTouchEnd","handleTouchEnd","FontAwesomeIcon","icon","faAngleLeft","faAngleRight","faXmark","_","type","name","value","checked","onChange","handleRadioChange"],"sourceRoot":""}